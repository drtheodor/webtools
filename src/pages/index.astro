---
import Button from "@/components/ui/Button.astro";
import ImageDiff from "@/components/ui/ImageDiff.astro";
import Layout from "@/layouts/Layout.astro";
import ImageOptions from "@/components/partials/ImageOptions.astro";
import FileUpload from "@/components/partials/FileUpload.astro";
---

<Layout title="Image Converter" class="text-base-content">
  <div class="max-w-3xl mx-auto card-body bg-base-100 rounded-2xl border-2 border-base-300">
    <h1 class="text-2xl font-bold text-center mb-6">
      Image Converter
    </h1>

    <div class="space-y-6">
      <FileUpload id="fileUpload" label="Upload Images" accept="image/*" />
      <ImageOptions id="options" disabled />
      
      <div class="w-full flex">
      <span id="originalImgInfo" class="w-1/2 text-center pt-1"></span>
      <span id="resultImgInfo" class="w-1/2 text-center pt-1"></span>
      </div>
    </div>

    <div id="previewContainer" class="mt-8 hidden">
      <h2 class="text-lg font-medium text-white mb-4 text-center">Preview</h2>
      <ImageDiff id1="originalImage" id2="resultImage" />

      <div class="mt-4 flex justify-center">
        <Button variant="success" class="btn-success">
          <a id="downloadLink" href="#">
            Download Converted image
          </a> 
        </Button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { debounce, type HTMLImageOptions } from "@/lib/comps";
  import type { FormatOption } from "@/lib/formats";
  import { formatBytes, getLoadedImageSize, getCanvasFileSize } from "@/lib/imgutil";

  interface ImageConverter {
    currentImage: HTMLImageElement | null;
    originalFile: File | null;
  }

  const state: ImageConverter = {
    currentImage: null,
    originalFile: null,
  };
  
  const originalImageInfo = document.getElementById("originalImgInfo")! as HTMLSpanElement;
  const resultImageInfo = document.getElementById("resultImgInfo")! as HTMLSpanElement;
  
  const fileDrop = document.getElementById("fileUpload")!;
  const originalImage = document.getElementById(
    "originalImage"
  ) as HTMLImageElement;

  fileDrop.addEventListener("upload:file", e => {
    const file = (e as CustomEvent).detail.file as File;
    processFile(file);
  });
  
  function processFile(file: File) {
    if (!file.type.match("image.*")) {
      alert("Please select an image file");
      return;
    }

    state.originalFile = file;
    const reader = new FileReader();

    reader.onload = (e: ProgressEvent<FileReader>) => {
      const img = new Image();
      img.onload = async () => {
        state.currentImage = img;
        originalImage.src = img.src;
        options.disabled = false;
        
        options.width = img.width;
        options.height = img.height;

        originalImageInfo.textContent = `Original: ${fmtInfo(img.width, img.height, await getLoadedImageSize(img))}`;
        updateResultInfo();
      };
      img.src = e.target?.result as string;
    };

    reader.readAsDataURL(file);
  }
  
  function updateResultInfo() {
    resultImageInfo.textContent = `Result: ${fmtInfo(options.width, options.height, 0)}`;

    tryPrepareCanvas(async (canvas, format, quality) => {
      resultImageInfo.textContent = `Result: ${fmtInfo(options.width, options.height, await getCanvasFileSize(canvas, format.mime, quality))}`;
    });
  }
  
  function fmtInfo(width: number, height: number, bytes: number) {
    const fmtBytes = bytes ? formatBytes(bytes) : "...";
    return `${width}x${height}px @ ${fmtBytes}`;
  }
  
  const previewContainer = document.getElementById("previewContainer")!;
  const resultImage = document.getElementById(
    "resultImage"
  ) as HTMLImageElement;
  const downloadLink = document.getElementById(
    "downloadLink"
  ) as HTMLAnchorElement;

  const options = document.getElementById("options") as HTMLImageOptions & HTMLElement;
  options.addEventListener("options:size", updateResultInfo);
  options.addEventListener("options:mime", updateResultInfo);
  options.addEventListener("options:quality", () => debounce(updateResultInfo, 1000)());
  options.addEventListener("options:convert", convertImage);
  
  function convertImage() {
    tryPrepareCanvas((canvas, format, quality) => {
      const dataURL = canvas.toDataURL(format.mime, quality);

      resultImage.src = dataURL;
      downloadLink.href = dataURL;
      
      const name = state.originalFile!.name ?? "converted-image";
      const fileName = name.substring(0, name.lastIndexOf("."));

      downloadLink.download = `${fileName}.${format?.extension}`;
      previewContainer.classList.remove("hidden");
    });
  }

  function tryPrepareCanvas(callback: (canvas: HTMLCanvasElement, format: FormatOption, quality: number) => void) {
    if (!state.currentImage) return;

    const format = options.format;

    if (!format) return;

    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");

    if (!ctx) return;

    canvas.width = options.width;
    canvas.height = options.height;
    ctx.drawImage(state.currentImage, 0, 0, canvas.width, canvas.height);
    
    const quality = options.quality ? options.quality / 100 : 100;
    callback(canvas, format, quality);
  }
</script>