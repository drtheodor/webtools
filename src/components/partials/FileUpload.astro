---
type Props = {
    label: string;
    accept: string;
    [key: string]: any;
};

const { label, accept, ...attrs } = Astro.props;
---

<file-drop {...attrs}>
    <label class="block text-sm font-medium mb-1">
        {label}
        <div
            id="dropZone"
            class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-dashed rounded-md border-primary hover:border-accent-200 transition-colors"
        >
        <div class="space-y-1 text-center">
            <div class="flex justify-center text-gray-400">
            <svg
                class="mx-auto h-12 w-12"
                stroke="currentColor"
                fill="none"
                viewBox="0 0 48 48"
            >
                <path
                d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
            </div>
            <div class="flex text-sm text-gray-400">
            <label
                class="relative cursor-pointer bg-gray-800 rounded-md font-medium text-blue-400 hover:text-blue-300"
            >
                <span>Upload a file</span>
                <input
                    type="file"
                    id="imageInput"
                    accept={accept}
                    class="sr-only"
                />
            </label>
            <p class="pl-1">or drag and drop</p>
            </div>
            <p class="text-xs text-base-content/60">PNG, JPG, WEBP up to 10MB</p>
        </div>
        </div>
    </label>
</file-drop>

<script>
    class FileDropElement extends HTMLElement {
        isDragging: boolean = false;

        connectedCallback() {
            const dropZone = this.querySelector("#dropZone")!;
            
            dropZone.addEventListener("dragover", e => {
                e.preventDefault();
                if (!this.isDragging) {
                    this.isDragging = true;
                    dropZone.classList.add("border-blue-500", "bg-gray-800");
                }
            });
            
            dropZone.addEventListener("dragleave", e => {
                this.isDragging = false;
                dropZone.classList.remove("border-blue-500", "bg-gray-800");
            });

            dropZone.addEventListener("drop", e => {
                if (!(e instanceof DragEvent)) return;
                
                e.preventDefault();

                this.isDragging = false;
                dropZone.classList.remove("border-blue-500", "bg-gray-800");

                if (e.dataTransfer?.files && e.dataTransfer.files[0]) {
                    this.handleFile(e.dataTransfer.files[0]);
                }
            });

            const imageInput = this.querySelector("#imageInput") as HTMLInputElement;

            imageInput.addEventListener("change", e => {
                const input = e.target as HTMLInputElement;
                if (input.files && input.files[0]) {
                    this.handleFile(input.files[0]);
                }
            });
        }

        handleFile(file: File) {
            this.dispatchEvent(new CustomEvent('upload:file', { detail: { file } }));
        }
    }
    
    customElements.define('file-drop', FileDropElement);
</script>